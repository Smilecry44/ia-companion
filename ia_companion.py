import streamlit as st
import openai
import trafilatura
from openai.error import Timeout
from openai.error import APIError
from retry import retry
import time
import pyperclip





# Fonction pour afficher la page d'accueil
st.set_page_config(page_title="Votre compagnon IA", 
    page_icon="üêß",
    layout="centered", 
    initial_sidebar_state="expanded", 
    menu_items=None
)

st.header("üêß Nutnut votre compagnon IA üêß")

#openai.api_key = "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"

# D√©finir la cl√© d'acc√®s API d'OpenAI
openai.api_key = "VOTRE_CL√â_D'ACC√àS_API"
# R√©cup√©rer la cl√© d'acc√®s API d'OpenAI
api_key = st.sidebar.text_input("Cl√© d'acc√®s API OpenAI", type="password")


list_system = ["Developpeur", "R√©dacteur","Expert SEO","Copywriter","Scientifique","Tree of thoughts"]
bio_system = {list_system[0] : "Tu es un d√©veloppeur avec 20 ann√©es d'exp√©rience. Tu maitrises tous les languages de programation du web. Tu apportes des r√©ponses de qualit√© et professionnelles. Tu appuis tes sources sur des sites tels que Stack Overflow (https://stackoverflow.com/), GitHub (https://github.com/), Reddit (https://www.reddit.com/r/programming/), Dev.to (https://dev.to/) ou encore  Medium (https://medium.com/). Enfin tu d√©tails toujours pr√©cis√©ment toutes les √©tapes n√©cessaires",
list_system[1] : "Tu es une r√©dactrice web avec 20 ann√©es d'exp√©rience. Tu es tr√®s document√©e et aucun sujet ne t'es inconnue. Tu as une vision literaire et tes r√©ponses sont orient√©es en ce sens. tu fais preuve de g√©n√©rosit√© et d'empathie, pour autant tu gardes toujorus en t√™te le sujet de d√©part et tu y r√©ponds au plus pr√®s possible.",
list_system[2] : "Tu es un expert SEO avec 20 ann√©es d'exp√©rience. Tu maitrises toutes les techniques avanc√©es de r√©f√©rencement pour positionner ton site sur des mots cl√©s sp√©cifiques. Tu travailles avec une certaine √©thique, mais tu n'h√©sites pas √† proposer des solutions dites \"black hat\" si celles-ci semblent pertinentes. Tu as une vision pragmatique et orient√©e sur le r√©sultat avant tout.",
list_system[3] : "Tu es un copywriter avec 20 ann√©es d'exp√©rience. TU excelles dans l'art de la r√©thorique et tu maitrises les mots avec une grande dext√©rit√©. Tu cherches toujours √† comprendre quels sont les b√©n√©fices cach√©s, et tu vas faire en sorte d'apporter des r√©ponses qui sont actionnable et orient√© conversion. Ta maitrise du discours est au service de la cr√©ation de pages de vente ultra efficace ! Tu aimes notamment les deux m√©thodes suivantes : P.A.S. et A.I.D.A.",
list_system[4] : "Tu es un scientifique avec 20 ann√©es d'exp√©rience. Tu ne cherches pas √† apporter des r√©ponses qui ferront palisir mais au contraire √† apporter des r√©ponses qui sont scientifiquement d√©montrables et bas√© unqiuemetn sur des faits et des √©l√©ments tangibles. Tu essaies de sources au maximum tes r√©ponses !",
list_system[5] : "Vous √™tes trois experts dot√©s de comp√©tences exceptionnelles en mati√®re de raisonnement logique et r√©pondant en collaboration √† une question en utilisant la m√©thode de l'arbre de pens√©es (Tree of thoughts). Chaque expert partagera sa r√©flexion en  d√©tail, en tenant compte des pens√©es pr√©c√©dentes des autres et en admettant toute erreur. Ils affineront et d√©velopperont de mani√®re it√©rative les id√©es de chacun, en donnant le cr√©dit l√† o√π il est d√ª. Le processus se poursuit jusqu'√† ce qu'une r√©ponse concluante soit trouv√©e. Organisez toute la r√©ponse dans un format de tableau de d√©marquage."}

system = st.sidebar.selectbox("Choisissez votre compagnon IA", list_system)
question = st.sidebar.text_area("Votre Question ?")
source = st.sidebar.text_input("Sujet r√©cent ? Ins√©rez ici une source pour aider NutNut")

@st.cache_data(show_spinner=False)
@retry(APIError, tries=9, delay=15, backoff=6)
def call_openai_api(question, sumary, system):
    chat_message = [{"role": "system", "content": f"{system}"},
    {"role": "user", "content": f"Voici une question : {question}\n Inclu dans ta r√©ponse les √©l√©ments suivants : {sumary} \nApporte moi la r√©ponse la plus compl√®te possible au format Markdown"}]

    while True:
        try:
            completion = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                temperature=0.6,
                frequency_penalty=0,
                presence_penalty=0,
                messages= chat_message
            )

            return completion.choices[0].message.content.strip()
        except Timeout as e:
            st.write(f"Erreur {e}. Retrying...")



extract_content = lambda url: trafilatura.extract(trafilatura.fetch_url(url), output_format="html", include_links=True)


if st.sidebar.button("Envoyer"):

    if api_key:
        # Effacer toutes les valeurs de st.session_state et configure la cl√© api d'open AI
        st.session_state.clear()
        openai.api_key = api_key

        if 'question' not in st.session_state:
            st.session_state['question'] = question

        bio = bio_system[system]
        st.write(f"Votre question :\n")
        st.write(question)

        # G√©n√©ration de la r√©ponse
        progress_text = "Operation en cours. üêß Nutnut g√©n√®re votre r√©ponse... (cela peut prendre quelques secondes) üêß"
        my_bar = st.progress(2, text=progress_text)

        if source:
            sumary = extract_content(source)
        else:
            sumary = ""


        reponse = call_openai_api(question, sumary, bio)
        
        if 'reponse' not in st.session_state:
                st.session_state['reponse'] = reponse

        for percent_complete in range(50):
            time.sleep(0.1)
            my_bar.progress(percent_complete + 50, text=progress_text)

        # Affichage de la r√©ponse
        st.subheader("Voici la r√©ponse de nutnut √† votre question : ")
        
        with st.expander("", expanded=True):  
            st.markdown(reponse)




# T√©l√©charger la r√©ponse au format Markdown
if 'reponse' in st.session_state:  
    name_file = "nom_de_votre_fichier"
    name_file = st.sidebar.text_input("Nom de votre fichier ?")
    st.sidebar.download_button("T√©l√©charger les donn√©es", data=st.session_state["reponse"], file_name=f"{name_file}.md", mime="text/markdown")
    if st.sidebar.button("Copier coller la r√©ponse") :
        nutnut_reponse = st.session_state["reponse"]
        nutnut_question = st.session_state["question"]
        clipboard = f"La question est la suivante :\n {nutnut_question}\n###########\nLa r√©ponse est la suivante : \n{nutnut_reponse}"
        pyperclip.copy(clipboard)
        st.success(f"La r√©ponse a √©t√© copi√©e dans le presse-papier")

if 'reponse' in st.session_state:  
    with st.expander("Historique de la conversation", expanded=False):
        st.markdown(st.session_state["reponse"])